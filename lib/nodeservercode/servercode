const express = require("express");
const app = express();
const ip = require('ip')
const bodyParser = require("body-parser");
const webrtc = require("wrtc");
const server = require("http").Server(app);
const io = require("socket.io")(server, {
  cors: {
    origin: "*",
  },
});

const port = 5000;
let senderStreams = [];
var roomList = [];
const iceServerList = [
      {urls: "stun:stun.stunprotocol.org",},
      {urls: "stun:stun.l.google.com:19302",},
      {urls: "stun:stun1.l.google.com:19302",},
      {urls: "stun:stun2.l.google.com:19302",},
      {urls: "stun:stun3.l.google.com:19302",},
      {urls: "stun:stun4.l.google.com:19302",},
      {urls: "stun:stun.voippro.com:3478",},
      {urls: "stun:stun.voipraider.com:3478",},
      {urls: "stun:stun.voipstunt.com:3478",},
      {urls: "stun:stun.voipwise.com:3478",},
      {urls: "stun:stun.voipzoom.com:3478",},
      {urls: "stun:stun.vopium.com:3478",},
      {urls: "stun:stun.voxgratia.org:3478",},
      {urls: "stun:stun.voxox.com:3478",},
      {urls: "stun:stun.voys.nl:3478",},
      {urls: "stun:stun.voztele.com:3478",},
      {urls: "stun:stun.vyke.com:3478",},
      {urls: "stun:stun.webcalldirect.com:3478",},
      {urls: "stun:stun.whoi.edu:3478",},
      {urls: "stun:stun.wifirst.net:3478",},
      {urls: "stun:stun.wwdl.net:3478",},
      {urls: "stun:stun.xs4all.nl:3478",},
      {urls: "stun:stun.xtratelecom.es:3478",},
      {urls: "stun:stun.yesss.at:3478",},
      {urls: "stun:stun.zadarma.com:3478",},
      {urls: "stun:stun.zadv.com:3478",},
      {urls: "stun:stun.zoiper.com:3478",},
      {urls : "stun:stun.lowratevoip.com:3478",},
      {urls : "stun:stun.lugosoft.com:3478",},
      {urls : "stun:stun.lundimatin.fr:3478",},
      {urls : "stun:stun.magnet.ie:3478",},
      {urls : "stun:stun.manle.com:3478",},
      {urls : "stun:stun.mgn.ru:3478",},
      {urls : "stun:stun.mit.de:3478",},
      {urls : "stun:stun.mitake.com.tw:3478",},
      {urls : "stun:stun.miwifi.com:3478",},
      {urls : "stun:stun.modulus.gr:3478",},
      {urls : "stun:stun.mozcom.com:3478",},
      {urls : "stun:stun.myvoiptraffic.com:3478",},
      {urls : "stun:stun.mywatson.it:3478",},
      {urls : "stun:stun.nas.net:3478",},
      {urls : "stun:stun.neotel.co.za:3478",},
      {urls : "stun:stun.netappel.com:3478",},
      {urls : "stun:stun.netappel.fr:3478",},
      {urls : "stun:stun.netgsm.com.tr:3478",},
      {urls : "stun:stun.nfon.net:3478",},
      {urls : "stun:stun.noblogs.org:3478",},
      {urls : "stun:stun.noc.ams-ix.net:3478",},
      {urls : "stun:stun.node4.co.uk:3478",},
    ];

app.use(express.static("public"));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

app.get("/*", (req, res) => res.send("SFUs SERVER"));

function handleTrackEvent(e, userId, roomId) {
  const roomIndex = roomList.findIndex((item) => roomId === item.roomId);
  if(roomIndex != -1){
    const userIndex = roomList[roomIndex].roomUserList.findIndex((item) => userId === item.socketId);
    if(userIndex != -1){
      roomList[roomIndex].roomUserList[userIndex].stream = e.streams[0];
    }else{
      roomList[roomIndex].roomUserList.push({
        socketId: userId,
        stream: e.streams[0]
      });
    }
  }else{
    const roomUserList = [];
    roomUserList.push({
      socketId: userId,
      stream: e.streams[0],
    });
    roomList.push({
      roomId: roomId,
      roomUserList : roomUserList
    });
  }

  /*
  const index = senderStreams.findIndex((item) => socketId === item.socketId);
  if (index != -1) {
    senderStreams[index].stream = e.streams[0];
  } else {
    senderStreams.push({
      socketId: socketId,
      stream: e.streams[0],
    });
  }
  */
}

async function createPeerConnectionSend(sdp, socketId, roomId) {
  const peer = new webrtc.RTCPeerConnection({
    iceServers: iceServerList
  });



  peer.ontrack = (e) => handleTrackEvent(e, socketId, roomId);
  const sdpDesc = {
    type: "offer",
    sdp: sdp,
  };
  const desc = new webrtc.RTCSessionDescription(sdpDesc);
  await peer.setRemoteDescription(desc);
  const answer = await peer.createAnswer();
  await peer.setLocalDescription(answer);
  const payload = peer.localDescription.sdp;
  return payload;
}

async function createPeerConnectionReceive(sdp, socketId, roomId) {
  const peer = new webrtc.RTCPeerConnection({
    iceServers: iceServerList
  });
  const sdpDesc = {
    type: "offer",
    sdp: sdp,
  };
  const desc = new webrtc.RTCSessionDescription(sdpDesc);
  await peer.setRemoteDescription(desc);

  const roomIndex = roomList.findIndex((e) => e.roomId === roomId);
  if(roomIndex != -1){
    const index = roomList[roomIndex].roomUserList.findIndex((e) => e.socketId === socketId);
    if (roomList[roomIndex].roomUserList.length > 0) {
      console.log("stream info : " + roomList[roomIndex].roomUserList[index].stream);
      roomList[roomIndex].roomUserList[index].stream
        .getTracks()
        .forEach((track) => peer.addTrack(track, roomList[roomIndex].roomUserList[index].stream));
    }
  }

  /*
  const index = senderStreams.findIndex((e) => e.socketId === socketId);
  if (senderStreams.length > 0) {
    senderStreams[index].stream
      .getTracks()
      .forEach((track) => peer.addTrack(track, senderStreams[index].stream));
  }
  */
  const answer = await peer.createAnswer();
  await peer.setLocalDescription(answer);
  const payload = peer.localDescription.sdp;

  return payload;
}

function consoleLogRoomInfo(){
  console.log("roomList info start ==========>");
    console.log("roomList size : " + roomList.length);
    roomList.forEach(function(eachRoom, roomIndex) {
      console.log(" room[" + roomIndex +"] : " + eachRoom.roomId);
      eachRoom.roomUserList.forEach(function(user) {
        console.log("   user in this room : " + user.socketId);
      });
    });
  console.log("roomList info end ==========>");
}

function consoleLogOtherUserListInfo(list){
  console.log("otherUserList info start ==========>");
    list.forEach(function(otherId) {
      console.log(" other user : " + otherId);
    });
  console.log("otherUserList info end ==========>");
}

io.on("connection", function (socket) {
  console.log("connected id : " + socket.id);
  io.to(socket.id).emit("CONNECTED_ID",{
    socketId: socket.id
  });

  socket.on("INIT_PEER_REQ", async function (data) {
    console.log("init peer id : " + data.userId);
    const payload = await createPeerConnectionSend(data.sdp, data.userId, data.roomId);
    const roomIndex = roomList.findIndex((e) => e.roomId === data.roomId);
    var userList = roomList[roomIndex].roomUserList;
    consoleLogRoomInfo();

    var otherUserList = userList.filter((e) => e.socketId != data.userId).map((e) => e.socketId);
    consoleLogOtherUserListInfo(otherUserList);

    //const listSocketId = senderStreams.filter((e) => e.socketId != socket.id).map((e) => e.socketId);
    io.to(data.userId).emit("INIT_PEER_RESP", {
      sdp: payload,
      sockets: otherUserList,
    });

    otherUserList.forEach(function(user) {
      io.to(user).emit("INIT_NEW_PEER_RESP", {
        socketId: data.userId
      });
    });

    /*
    socket.broadcast.emit("NEW-PEER-SSC", {
      socketId: socket.id,
    });
    */
  });

  socket.on("RECEIVE_PEER_REQ", async function (data) {
    const payload = await createPeerConnectionReceive(data.sdp, data.otherUserId, data.roomId);
    console.log("receive req : " + data.userId + " --> " + data.otherUserId);
    io.to(data.userId).emit("RECEIVE_PEER_RESP", {
      socketId: data.otherUserId,
      sdp: payload,
    });
  });

  socket.on("MESSAGE_PEER_REQ", async function (data) {
    console.log("message req : " + data.userId + " msg : " + data.message);

    const roomIndex = roomList.findIndex((e) => e.roomId === data.roomId);
    var userList = roomList[roomIndex].roomUserList;
    userList.forEach(function(user) {
      io.to(user.socketId).emit("MESSAGE_PEER_RESP", {
        socketId: data.userId,
        message: data.message
      });
    });
  });

  socket.on("OUT_PEER_REQ", async function (data) {
    console.log("out info start ==========>");
    console.log(" out roomId : " + data.roomId);
    console.log(" out userId : " + data.userId);
    console.log("out info end ==========>");
    const roomIndex = roomList.findIndex((e) => e.roomId === data.roomId);
    var userList = roomList[roomIndex].roomUserList;
    roomList[roomIndex].roomUserList = userList.filter((e) => e.socketId != data.userId);

    const otherUserList = userList.filter((e) => e.socketId != data.userId).map((e) => e.socketId);
    otherUserList.forEach(function(user) {
      io.to(user).emit("OUT-PEER-SSC", {
        socketId: socket.id
      });
    });

    /*
    socket.broadcast.emit("OUT-PEER-SSC", {
      socketId: socket.id,
    });
    */
  });

  socket.on("disconnect", function () {
    //senderStreams = senderStreams.filter((e) => e.socketId !== socket.id);

    var roomIdx = -1;
    var roomId = "";
    roomList.forEach(function(eachRoom, roomIndex) {
      eachRoom.roomUserList.forEach(function(eachUser) {
        if(eachUser.socketId == socket.id){
          roomId = eachRoom.roomId;
          roomIdx = roomIndex;
        }
      });
    });
    console.log("disconnected info start ==========>");
    console.log(" disconnected roomId[" + roomIdx + "] : " + roomId);
    console.log(" disconnected userId : " + socket.id);
    console.log("disconnected info end ==========>");
    if(roomIdx != -1){
      var userList = roomList[roomIdx].roomUserList;
      roomList[roomIdx].roomUserList = userList.filter((e) => e.socketId != socket.id);
      var otherUserList = userList.filter((e) => e.socketId != socket.id);
      consoleLogRoomInfo();

      if(otherUserList.length > 0){
        roomList[roomIdx].roomUserList = otherUserList;
        otherUserList.forEach(function(user) {
          io.to(user.socketId).emit("OUT_PEER_RESP", {
            socketId: socket.id
          });
        });
      }
    }
  });

});

server.listen(port, ip.address(), function () {
  const address = server.address()
  console.log(`[scoket] on ${address.address}:${address.port}`)
});

/*
=============================================================================================
*/


app.post("/broadcast", async ({ body }, res) => {
  console.log("broadcast");
  const peer = new webrtc.RTCPeerConnection({
    iceServers: [
      {
        urls: "stun:stun.stunprotocol.org",
      },
    ],
  });
  peer.ontrack = (e) =>
    handleTrackEvent(e, Math.floor(Math.random() * 1000000000).toString());
  const desc = new webrtc.RTCSessionDescription(body.sdp);
  await peer.setRemoteDescription(desc);
  const answer = await peer.createAnswer();
  await peer.setLocalDescription(answer);
  const payload = {
    sdp: peer.localDescription,
  };

  res.json(payload);
});
app.post("/consumer", async ({ body }, res) => {
  console.log("consumer");
  const peer = new webrtc.RTCPeerConnection({
    iceServers: [
      {
        urls: "stun:stun.stunprotocol.org",
      },
    ],
  });
  const desc = new webrtc.RTCSessionDescription(body.sdp);
  await peer.setRemoteDescription(desc);
  if (senderStreams.length > 0) {
    let index = 0;
    senderStreams[index].stream
      .getTracks()
      .forEach((track) => peer.addTrack(track, senderStreams[index].stream));
  }
  const answer = await peer.createAnswer();
  await peer.setLocalDescription(answer);
  const payload = {
    sdp: peer.localDescription,
  };

  res.json(payload);
});