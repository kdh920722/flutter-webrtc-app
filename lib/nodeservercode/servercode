const express = require("express");
const app = express();
const ip = require('ip')
const bodyParser = require("body-parser");
const webrtc = require("wrtc");
const server = require("http").Server(app);
const io = require("socket.io")(server, {
  cors: {
    origin: "*",
  },
});

const port = 5000;
let senderStreams = [];
var roomList = [];

app.use(express.static("public"));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

app.get("/*", (req, res) => res.send("SFUs SERVER"));

function handleTrackEvent(e, socketId, roomId) {
  const roomIndex = roomList.findIndex((item) => roomId === item.roomId);
  if(roomIndex != -1){
    const userIndex = roomList[roomIndex].roomUserList.findIndex((item) => socketId === item.socketId);
    if(userIndex != -1){
      roomList[roomIndex].roomUserList[userIndex].stream = e.streams[0];
    }else{
      roomList[roomIndex].roomUserList.push({
        socketId: socketId,
        stream: e.streams[0]
      });
    }
  }else{
    const roomUserList = [];
    roomUserList.push({
      socketId: socketId,
      stream: e.streams[0],
    });
    roomList.push({
      roomId: roomId,
      creator: socketId,
      roomUserList : roomUserList
    });
  }

  /*
  const index = senderStreams.findIndex((item) => socketId === item.socketId);
  if (index != -1) {
    senderStreams[index].stream = e.streams[0];
  } else {
    senderStreams.push({
      socketId: socketId,
      stream: e.streams[0],
    });
  }
  */
}

async function createPeerConnectionSend(sdp, socketId, roomId) {
  const peer = new webrtc.RTCPeerConnection({
    iceServers: [
      {
        urls: "stun:stun.stunprotocol.org",
      },
    ],
  });
  peer.ontrack = (e) => handleTrackEvent(e, socketId, roomId);
  const sdpDesc = {
    type: "offer",
    sdp: sdp,
  };
  const desc = new webrtc.RTCSessionDescription(sdpDesc);
  await peer.setRemoteDescription(desc);
  const answer = await peer.createAnswer();
  await peer.setLocalDescription(answer);
  const payload = peer.localDescription.sdp;
  return payload;
}

async function createPeerConnectionReceive(sdp, socketId, roomId) {
  const peer = new webrtc.RTCPeerConnection({
    iceServers: [
      {
        urls: "stun:stun.stunprotocol.org",
      },
    ],
  });
  const sdpDesc = {
    type: "offer",
    sdp: sdp,
  };
  const desc = new webrtc.RTCSessionDescription(sdpDesc);
  await peer.setRemoteDescription(desc);

  const roomIndex = roomList.findIndex((e) => e.roomId === roomId);
  if(roomIndex != -1){
    const index = roomList[roomIndex].roomUserList.findIndex((e) => e.socketId === socketId);
    if (roomList[roomIndex].roomUserList.length > 0) {
      roomList[roomIndex].roomUserList[index].stream
        .getTracks()
        .forEach((track) => peer.addTrack(track, roomList[roomIndex].roomUserList[index].stream));
    }
  }

  /*
  const index = senderStreams.findIndex((e) => e.socketId === socketId);
  if (senderStreams.length > 0) {
    senderStreams[index].stream
      .getTracks()
      .forEach((track) => peer.addTrack(track, senderStreams[index].stream));
  }
  */
  const answer = await peer.createAnswer();
  await peer.setLocalDescription(answer);
  const payload = peer.localDescription.sdp;

  return payload;
}

function consoleLogRoomInfo(list){
  list.forEach(function(item) {
    console.log("connected room info : " + item.roomId);
    item.roomUserList.forEach(function(user) {
      console.log("==>room user info : " + user.socketId);
    });
  });
}

function consoleLogUserListInfo(list){
  list.forEach(function(item) {
    console.log("room user info : " + item.socketId);
  });
}

function consoleLogUserListItemInfo(list){
  list.forEach(function(item) {
    console.log("room user info : " + item);
  });
}

io.on("connection", function (socket) {
  console.log("connected socket id : " + socket.id);
  socket.on("SEND-CSS", async function (data) {
    const payload = await createPeerConnectionSend(data.sdp, socket.id, data.roomId);
    consoleLogRoomInfo(roomList);
    var userList = roomList.filter((e) => e.roomId == data.roomId)[0].roomUserList;
    consoleLogUserListInfo(userList);
    var otherUserList = userList.filter((e) => e.socketId != socket.id).map((e) => e.socketId);
    consoleLogUserListItemInfo(otherUserList);
    //const listSocketId = senderStreams.filter((e) => e.socketId != socket.id).map((e) => e.socketId);

    io.to(socket.id).emit("SEND-SSC", {
      socketId: socket.id,
      sdp: payload,
      sockets: otherUserList,
    });

    otherUserList.forEach(function(user) {
      io.to(user).emit("NEW-PEER-SSC", {
        socketId: socket.id
      });
    });

    /*
    socket.broadcast.emit("NEW-PEER-SSC", {
      socketId: socket.id,
    });
    */
  });

  socket.on("RECEIVE-CSS", async function (data) {
    console.log("connected other user : " +data.socketId);
    const payload = await createPeerConnectionReceive(data.sdp, data.socketId, data.roomId);
    io.to(socket.id).emit("RECEIVE-SSC", {
      socketId: data.socketId,
      sdp: payload,
    });
  });

  socket.on("OUT-CSS", async function (data) {
    console.log("OUT room : " + data.roomId);
    console.log("OUT user : " + socket.id);
    var userList = roomList.filter((e) => e.roomId == data.roomId)[0].roomUserList;
    var otherUserList = userList.filter((e) => e.socketId != socket.id).map((e) => e.socketId);
    otherUserList.forEach(function(user) {
      io.to(user).emit("OUT-PEER-SSC", {
        socketId: socket.id
      });
    });

    /*
    socket.broadcast.emit("OUT-PEER-SSC", {
      socketId: socket.id,
    });
    */
  });

  socket.on("disconnect", function () {
    console.log("disconnected socket id : " + socket.id);
    //senderStreams = senderStreams.filter((e) => e.socketId !== socket.id);

    var roomIdx = -1;
    var roomId = "";
    roomList.forEach(function(eachRoom, roomIndex) {
      eachRoom.roomUserList.forEach(function(eachUser) {
        if(eachUser.socketId == socket.id){
          roomId = eachRoom.roomId;
          roomIdx = roomIndex;
        }
      });
    });
    var userList = roomList[roomIdx].roomUserList;
    var otherUserList = userList.filter((e) => e.socketId != socket.id);
    if(otherUserList.length > 0){
      roomList[roomIdx].roomUserList = otherUserList;
      otherUserList.forEach(function(user) {
        io.to(user.socketId).emit("OUT-PEER-SSC", {
          socketId: socket.id
        });
      });

    }else{
      roomList = roomList.filter((e) => e.roomId != roomId);
    }
    consoleLogRoomInfo(roomList);

    /*
    io.emit("OUT-PEER-SSC", {
      socketId: socket.id,
    });
    */

  });

});

app.post("/broadcast", async ({ body }, res) => {
  console.log("broadcast");
  const peer = new webrtc.RTCPeerConnection({
    iceServers: [
      {
        urls: "stun:stun.stunprotocol.org",
      },
    ],
  });
  peer.ontrack = (e) =>
    handleTrackEvent(e, Math.floor(Math.random() * 1000000000).toString());
  const desc = new webrtc.RTCSessionDescription(body.sdp);
  await peer.setRemoteDescription(desc);
  const answer = await peer.createAnswer();
  await peer.setLocalDescription(answer);
  const payload = {
    sdp: peer.localDescription,
  };

  res.json(payload);
});

app.post("/consumer", async ({ body }, res) => {
  console.log("consumer");
  const peer = new webrtc.RTCPeerConnection({
    iceServers: [
      {
        urls: "stun:stun.stunprotocol.org",
      },
    ],
  });
  const desc = new webrtc.RTCSessionDescription(body.sdp);
  await peer.setRemoteDescription(desc);
  if (senderStreams.length > 0) {
    let index = 0;
    senderStreams[index].stream
      .getTracks()
      .forEach((track) => peer.addTrack(track, senderStreams[index].stream));
  }
  const answer = await peer.createAnswer();
  await peer.setLocalDescription(answer);
  const payload = {
    sdp: peer.localDescription,
  };

  res.json(payload);
});

server.listen(port, ip.address(), function () {
    const address = server.address()
    console.log(`[scoket] on ${address.address}:${address.port}`)
});